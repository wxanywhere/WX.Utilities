<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:cv="clr-namespace:WX.Utilities.Downloader.Behavior;assembly=WX.Utilities.Downloader.AppLogic"
    >
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary  Source="Office2010BlueTheme.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <cv:BoolToBoolConverter x:Key="BoolToBoolConverter"/>
  <cv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
  
  <Style TargetType="Border">
  </Style>

  <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="Margin" Value="5,0,5,0"/>
    <Setter Property="Height" Value="23"/>
  </Style>

  <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
  </Style>


  <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
    <Setter Property="Height" Value="23"/>
  </Style>


  <Style TargetType="ComboBoxItem" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
  </Style>


  <Style TargetType="ContentControl" BasedOn="{StaticResource {x:Type ContentControl}}">
  </Style>


  <Style TargetType="ContextMenu" BasedOn="{StaticResource {x:Type ContextMenu}}">
  </Style>


  <Style TargetType="DataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
    <Setter Property="AutoGenerateColumns" Value="False"/>
    <Setter Property="SelectionMode" Value='Single'/>
    <Setter Property="IsReadOnly" Value="True"/>
  </Style>


  <Style TargetType="DatePicker" BasedOn="{StaticResource {x:Type DatePicker}}">
    <Setter Property="Height" Value="23" />
  </Style>


  <Style TargetType="DockPanel" >
  </Style>


  <Style TargetType="Expander" BasedOn="{StaticResource {x:Type Expander}}">
  </Style>


  <Style TargetType="Grid">
  </Style>


  <Style TargetType="GridSplitter" BasedOn="{StaticResource {x:Type GridSplitter}}">
  </Style>

  <Style TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}">
  </Style>


  <Style TargetType="GroupItem" BasedOn="{StaticResource {x:Type GroupItem}}">
  </Style>


  <Style TargetType="HeaderedContentControl" BasedOn="{StaticResource {x:Type HeaderedContentControl}}">
  </Style>


  <Style TargetType="ItemsControl" BasedOn="{StaticResource {x:Type ItemsControl}}">
  </Style>


  <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Background" Value="Transparent"/>
  </Style>


  <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
  </Style>


  <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
  </Style>


  <Style TargetType="ListView" BasedOn="{StaticResource {x:Type ListView}}">
  </Style>


  <Style TargetType="ListViewItem" BasedOn="{StaticResource {x:Type ListViewItem}}">
  </Style>

  <Style x:Key="ListViewItemContainerStyle" TargetType="ListViewItem" BasedOn="{StaticResource {x:Type ListViewItem}}">
    <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
  </Style>

  <Style TargetType="Menu" BasedOn="{StaticResource {x:Type Menu}}">
  </Style>


  <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
  </Style>


  <Style TargetType="Page" BasedOn="{StaticResource {x:Type Page}}">
  </Style>


  <Style TargetType="ProgressBar" BasedOn="{StaticResource {x:Type ProgressBar}}">
  </Style>


  <Style TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
  </Style>


  <Style TargetType="RepeatButton" BasedOn="{StaticResource {x:Type RepeatButton}}">
  </Style>


  <Style TargetType="ResizeGrip" BasedOn="{StaticResource {x:Type ResizeGrip}}">
  </Style>


  <Style TargetType="RichTextBox" BasedOn="{StaticResource {x:Type RichTextBox}}">
  </Style>


  <Style TargetType="ScrollBar" BasedOn="{StaticResource {x:Type ScrollBar}}">
  </Style>


  <Style TargetType="ScrollViewer" BasedOn="{StaticResource {x:Type ScrollViewer}}">
  </Style>


  <Style TargetType="Separator" BasedOn="{StaticResource {x:Type Separator}}">
  </Style>


  <Style TargetType="StatusBar" BasedOn="{StaticResource {x:Type StatusBar}}">
  </Style>


  <Style TargetType="StatusBarItem" BasedOn="{StaticResource {x:Type StatusBarItem}}">
  </Style>


  <Style TargetType="TabControl" BasedOn="{StaticResource {x:Type TabControl}}">
  </Style>


  <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
  </Style>


  <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
  </Style>


  <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="Height" Value="23"/>
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="true">
            <Border Background="OrangeRed" DockPanel.Dock="right" Margin="5,0,0,0" 
                                Width="20" Height="20" CornerRadius="5"
                                ToolTip="{Binding ElementName=customAdorner, 
                                          Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
              <TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" 
                                   FontWeight="Bold" Foreground="white" />
            </Border>
            <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
              <Border BorderBrush="red" BorderThickness="1" />
            </AdornedElementPlaceholder>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self}, 
                       Path=(Validation.Errors)[0].ErrorContent}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <Style TargetType="Thumb" BasedOn="{StaticResource {x:Type Thumb}}">
  </Style>


  <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
  </Style>

  <Style x:Key="ToggleButtonDownload" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsChecked,RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="Content" Value="▷"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding IsChecked,RelativeSource={RelativeSource Self}}" Value="Flase">
        <Setter Property="Content" Value="||"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="ToolBar" BasedOn="{StaticResource {x:Type ToolBar}}">
  </Style>


  <Style TargetType="ToolBarPanel" >
  </Style>


  <Style TargetType="ToolBarTray" BasedOn="{StaticResource {x:Type ToolBarTray}}">
  </Style>


  <Style TargetType="ToolTip" BasedOn="{StaticResource {x:Type ToolTip}}">
  </Style>


  <Style TargetType="TreeView" BasedOn="{StaticResource {x:Type TreeView}}">
  </Style>


  <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
  </Style>


  <Style TargetType="UserControl" BasedOn="{StaticResource {x:Type UserControl}}">
    <Setter Property="Margin" Value="2,8,2,8"/>
  </Style>
  <Style x:Key="UserControl" TargetType="UserControl" BasedOn="{StaticResource {x:Type UserControl}}">
    <Setter Property="IsHitTestVisible" Value="{Binding IsProcessed}"/>
    <Setter Property="Focusable" Value="{Binding IsProcessed}"/>
  </Style>

  <Style TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
  </Style>
  <Style x:Key="GridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="Visibility" Value="Collapsed" />
  </Style>


</ResourceDictionary>

